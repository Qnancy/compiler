; ModuleID = 'main'
source_filename = "main"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@0 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@1 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@2 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@3 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@4 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@5 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@6 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@7 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@8 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@9 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@10 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@11 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@12 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@13 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@14 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@15 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@16 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@17 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@18 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@19 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

declare i32 @print(i8*, ...)

define i32 @add(i32 %0, i32 %1) {
FuncEntry:
  %b = alloca i32, align 4
  %a = alloca i32, align 4
  store i32 %0, i32* %a, align 4
  store i32 %1, i32* %b, align 4
  %2 = load i32, i32* %a, align 4
  %3 = load i32, i32* %b, align 4
  %4 = add i32 %2, %3
  ret i32 %4
}

define void @main() {
FuncEntry:
  %mod = alloca i32, align 4
  %div = alloca i32, align 4
  %mul = alloca i32, align 4
  %f = alloca i32, align 4
  %e = alloca i32, align 4
  %logicLE = alloca i32, align 4
  %logicGT = alloca i32, align 4
  %logicAnd = alloca i32, align 4
  %logicOR = alloca i32, align 4
  %bitwiseAnd = alloca i32, align 4
  %bitwiseOR = alloca i32, align 4
  %um = alloca i32, align 4
  %up = alloca i32, align 4
  %d = alloca i32, align 4
  %c = alloca i32, align 4
  %b = alloca i32, align 4
  %a = alloca i32, align 4
  store i32 -2, i32* %a, align 4
  store i32 5, i32* %b, align 4
  %0 = load i32, i32* %a, align 4
  %1 = load i32, i32* %b, align 4
  %2 = call i32 @add(i32 %0, i32 %1)
  store i32 %2, i32* %c, align 4
  %3 = load i32, i32* %a, align 4
  %4 = call i32 (i8*, ...) @print(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @0, i32 0, i32 0), i32 %3)
  %5 = load i32, i32* %a, align 4
  %6 = load i32, i32* %b, align 4
  %7 = add i32 %5, %6
  store i32 %7, i32* %d, align 4
  %8 = load i32, i32* %d, align 4
  %9 = call i32 (i8*, ...) @print(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1, i32 0, i32 0), i32 %8)
  %10 = load i32, i32* %a, align 4
  store i32 %10, i32* %up, align 4
  %11 = load i32, i32* %b, align 4
  %12 = sub i32 0, %11
  store i32 %12, i32* %um, align 4
  %13 = load i32, i32* %a, align 4
  %14 = load i32, i32* %b, align 4
  %15 = icmp sle i32 %13, %14
  %16 = zext i1 %15 to i32
  store i32 %16, i32* %bitwiseOR, align 4
  %17 = load i32, i32* %a, align 4
  %18 = load i32, i32* %b, align 4
  %19 = icmp sge i32 %17, %18
  %20 = zext i1 %19 to i32
  store i32 %20, i32* %bitwiseAnd, align 4
  %21 = load i32, i32* %a, align 4
  %22 = icmp ne i32 %21, 0
  %23 = load i32, i32* %b, align 4
  %24 = icmp ne i32 %23, 0
  %25 = select i1 %22, i1 true, i1 %24
  %26 = zext i1 %25 to i32
  store i32 %26, i32* %logicOR, align 4
  %27 = load i32, i32* %a, align 4
  %28 = icmp ne i32 %27, 0
  %29 = load i32, i32* %b, align 4
  %30 = icmp ne i32 %29, 0
  %31 = select i1 %28, i1 %30, i1 false
  %32 = zext i1 %31 to i32
  store i32 %32, i32* %logicAnd, align 4
  %33 = load i32, i32* %a, align 4
  %34 = load i32, i32* %b, align 4
  %35 = icmp sgt i32 %33, %34
  %36 = zext i1 %35 to i32
  store i32 %36, i32* %logicGT, align 4
  %37 = load i32, i32* %a, align 4
  %38 = load i32, i32* %b, align 4
  %39 = icmp sle i32 %37, %38
  %40 = zext i1 %39 to i32
  store i32 %40, i32* %logicLE, align 4
  %41 = load i32, i32* %a, align 4
  %42 = load i32, i32* %b, align 4
  %43 = add i32 %41, %42
  store i32 %43, i32* %e, align 4
  %44 = load i32, i32* %a, align 4
  %45 = load i32, i32* %b, align 4
  %46 = sub i32 %44, %45
  store i32 %46, i32* %f, align 4
  %47 = load i32, i32* %e, align 4
  %48 = call i32 (i8*, ...) @print(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @2, i32 0, i32 0), i32 %47)
  %49 = load i32, i32* %f, align 4
  %50 = call i32 (i8*, ...) @print(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @3, i32 0, i32 0), i32 %49)
  %51 = load i32, i32* %a, align 4
  %52 = load i32, i32* %b, align 4
  %53 = mul i32 %51, %52
  store i32 %53, i32* %mul, align 4
  %54 = load i32, i32* %a, align 4
  %55 = load i32, i32* %b, align 4
  %56 = sdiv i32 %54, %55
  store i32 %56, i32* %div, align 4
  %57 = load i32, i32* %a, align 4
  %58 = load i32, i32* %b, align 4
  %59 = srem i32 %57, %58
  store i32 %59, i32* %mod, align 4
  %60 = load i32, i32* %a, align 4
  %61 = call i32 (i8*, ...) @print(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @4, i32 0, i32 0), i32 %60)
  %62 = load i32, i32* %b, align 4
  %63 = call i32 (i8*, ...) @print(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @5, i32 0, i32 0), i32 %62)
  %64 = load i32, i32* %c, align 4
  %65 = call i32 (i8*, ...) @print(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @6, i32 0, i32 0), i32 %64)
  %66 = load i32, i32* %c, align 4
  %67 = call i32 (i8*, ...) @print(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @7, i32 0, i32 0), i32 %66)
  %68 = load i32, i32* %up, align 4
  %69 = call i32 (i8*, ...) @print(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @8, i32 0, i32 0), i32 %68)
  %70 = load i32, i32* %um, align 4
  %71 = call i32 (i8*, ...) @print(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @9, i32 0, i32 0), i32 %70)
  %72 = load i32, i32* %bitwiseOR, align 4
  %73 = call i32 (i8*, ...) @print(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @10, i32 0, i32 0), i32 %72)
  %74 = load i32, i32* %bitwiseAnd, align 4
  %75 = call i32 (i8*, ...) @print(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @11, i32 0, i32 0), i32 %74)
  %76 = load i32, i32* %logicOR, align 4
  %77 = call i32 (i8*, ...) @print(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @12, i32 0, i32 0), i32 %76)
  %78 = load i32, i32* %logicAnd, align 4
  %79 = call i32 (i8*, ...) @print(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @13, i32 0, i32 0), i32 %78)
  %80 = load i32, i32* %logicOR, align 4
  %81 = call i32 (i8*, ...) @print(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @14, i32 0, i32 0), i32 %80)
  %82 = load i32, i32* %logicGT, align 4
  %83 = call i32 (i8*, ...) @print(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @15, i32 0, i32 0), i32 %82)
  %84 = load i32, i32* %logicLE, align 4
  %85 = call i32 (i8*, ...) @print(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @16, i32 0, i32 0), i32 %84)
  %86 = load i32, i32* %mul, align 4
  %87 = call i32 (i8*, ...) @print(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @17, i32 0, i32 0), i32 %86)
  %88 = load i32, i32* %div, align 4
  %89 = call i32 (i8*, ...) @print(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @18, i32 0, i32 0), i32 %88)
  %90 = load i32, i32* %mod, align 4
  %91 = call i32 (i8*, ...) @print(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @19, i32 0, i32 0), i32 %90)
  ret void
}
